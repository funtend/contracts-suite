// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AllClaimedMilestone extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllClaimedMilestone entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllClaimedMilestone must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllClaimedMilestone", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AllClaimedMilestone | null {
    return changetype<AllClaimedMilestone | null>(
      store.get("AllClaimedMilestone", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get milestone(): i32 {
    let value = this.get("milestone");
    return value!.toI32();
  }

  set milestone(value: i32) {
    this.set("milestone", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GrantCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): GrantCreated | null {
    return changetype<GrantCreated | null>(
      store.get("GrantCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get levelInfo(): Array<string> {
    let value = this.get("levelInfo");
    return value!.toStringArray();
  }

  set levelInfo(value: Array<string>) {
    this.set("levelInfo", Value.fromStringArray(value));
  }

  get milestones(): Array<string> {
    let value = this.get("milestones");
    return value!.toStringArray();
  }

  set milestones(value: Array<string>) {
    this.set("milestones", Value.fromStringArray(value));
  }

  get acceptedCurrencies(): Array<Bytes> {
    let value = this.get("acceptedCurrencies");
    return value!.toBytesArray();
  }

  set acceptedCurrencies(value: Array<Bytes>) {
    this.set("acceptedCurrencies", Value.fromBytesArray(value));
  }

  get granteeAddresses(): Array<Bytes> {
    let value = this.get("granteeAddresses");
    return value!.toBytesArray();
  }

  set granteeAddresses(value: Array<Bytes>) {
    this.set("granteeAddresses", Value.fromBytesArray(value));
  }

  get splits(): Array<BigInt> {
    let value = this.get("splits");
    return value!.toBigIntArray();
  }

  set splits(value: Array<BigInt>) {
    this.set("splits", Value.fromBigIntArray(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get grantMetadata(): string | null {
    let value = this.get("grantMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set grantMetadata(value: string | null) {
    if (!value) {
      this.unset("grantMetadata");
    } else {
      this.set("grantMetadata", Value.fromString(<string>value));
    }
  }

  get fundedAmount(): Array<string> | null {
    let value = this.get("fundedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set fundedAmount(value: Array<string> | null) {
    if (!value) {
      this.unset("fundedAmount");
    } else {
      this.set("fundedAmount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sticker(): boolean {
    let value = this.get("sticker");
    return value!.toBoolean();
  }

  set sticker(value: boolean) {
    this.set("sticker", Value.fromBoolean(value));
  }

  get poster(): boolean {
    let value = this.get("poster");
    return value!.toBoolean();
  }

  set poster(value: boolean) {
    this.set("poster", Value.fromBoolean(value));
  }

  get shirt(): boolean {
    let value = this.get("shirt");
    return value!.toBoolean();
  }

  set shirt(value: boolean) {
    this.set("shirt", Value.fromBoolean(value));
  }

  get hoodie(): boolean {
    let value = this.get("hoodie");
    return value!.toBoolean();
  }

  set hoodie(value: boolean) {
    this.set("hoodie", Value.fromBoolean(value));
  }

  get funders(): Array<string> | null {
    let value = this.get("funders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set funders(value: Array<string> | null) {
    if (!value) {
      this.unset("funders");
    } else {
      this.set("funders", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class GrantDeleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantDeleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantDeleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantDeleted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): GrantDeleted | null {
    return changetype<GrantDeleted | null>(
      store.get("GrantDeleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get deleter(): Bytes {
    let value = this.get("deleter");
    return value!.toBytes();
  }

  set deleter(value: Bytes) {
    this.set("deleter", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GrantFunded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantFunded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantFunded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantFunded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): GrantFunded | null {
    return changetype<GrantFunded | null>(
      store.get("GrantFunded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get grant(): Bytes {
    let value = this.get("grant");
    return value!.toBytes();
  }

  set grant(value: Bytes) {
    this.set("grant", Value.fromBytes(value));
  }

  get funder(): Bytes {
    let value = this.get("funder");
    return value!.toBytes();
  }

  set funder(value: Bytes) {
    this.set("funder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Collection extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Collection must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Collection | null {
    return changetype<Collection | null>(
      store.get("Collection", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get prices(): Array<BigInt> {
    let value = this.get("prices");
    return value!.toBigIntArray();
  }

  set prices(value: Array<BigInt>) {
    this.set("prices", Value.fromBigIntArray(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get pixelType(): string {
    let value = this.get("pixelType");
    return value!.toString();
  }

  set pixelType(value: string) {
    this.set("pixelType", Value.fromString(value));
  }

  get collectionMetadata(): string | null {
    let value = this.get("collectionMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectionMetadata(value: string | null) {
    if (!value) {
      this.unset("collectionMetadata");
    } else {
      this.set("collectionMetadata", Value.fromString(<string>value));
    }
  }
}

export class CollectionMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionMetadata", id.toString(), this);
    }
  }

  static load(id: string): CollectionMetadata | null {
    return changetype<CollectionMetadata | null>(
      store.get("CollectionMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get images(): Array<string> | null {
    let value = this.get("images");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set images(value: Array<string> | null) {
    if (!value) {
      this.unset("images");
    } else {
      this.set("images", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tags(): string | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tags(value: string | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromString(<string>value));
    }
  }

  get colors(): string | null {
    let value = this.get("colors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set colors(value: string | null) {
    if (!value) {
      this.unset("colors");
    } else {
      this.set("colors", Value.fromString(<string>value));
    }
  }

  get sizes(): string | null {
    let value = this.get("sizes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sizes(value: string | null) {
    if (!value) {
      this.unset("sizes");
    } else {
      this.set("sizes", Value.fromString(<string>value));
    }
  }

  get access(): string | null {
    let value = this.get("access");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set access(value: string | null) {
    if (!value) {
      this.unset("access");
    } else {
      this.set("access", Value.fromString(<string>value));
    }
  }

  get audio(): string | null {
    let value = this.get("audio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set audio(value: string | null) {
    if (!value) {
      this.unset("audio");
    } else {
      this.set("audio", Value.fromString(<string>value));
    }
  }

  get video(): string | null {
    let value = this.get("video");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set video(value: string | null) {
    if (!value) {
      this.unset("video");
    } else {
      this.set("video", Value.fromString(<string>value));
    }
  }

  get onBlankon(): string | null {
    let value = this.get("onBlankon");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set onBlankon(value: string | null) {
    if (!value) {
      this.unset("onBlankon");
    } else {
      this.set("onBlankon", Value.fromString(<string>value));
    }
  }

  get communities(): string | null {
    let value = this.get("communities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set communities(value: string | null) {
    if (!value) {
      this.unset("communities");
    } else {
      this.set("communities", Value.fromString(<string>value));
    }
  }

  get microbrandCover(): string | null {
    let value = this.get("microbrandCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set microbrandCover(value: string | null) {
    if (!value) {
      this.unset("microbrandCover");
    } else {
      this.set("microbrandCover", Value.fromString(<string>value));
    }
  }

  get profileHandle(): string | null {
    let value = this.get("profileHandle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileHandle(value: string | null) {
    if (!value) {
      this.unset("profileHandle");
    } else {
      this.set("profileHandle", Value.fromString(<string>value));
    }
  }

  get microbrand(): string | null {
    let value = this.get("microbrand");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set microbrand(value: string | null) {
    if (!value) {
      this.unset("microbrand");
    } else {
      this.set("microbrand", Value.fromString(<string>value));
    }
  }

  get mediaCover(): string | null {
    let value = this.get("mediaCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mediaCover(value: string | null) {
    if (!value) {
      this.unset("mediaCover");
    } else {
      this.set("mediaCover", Value.fromString(<string>value));
    }
  }

  get visibility(): string | null {
    let value = this.get("visibility");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set visibility(value: string | null) {
    if (!value) {
      this.unset("visibility");
    } else {
      this.set("visibility", Value.fromString(<string>value));
    }
  }

  get mediaTypes(): string | null {
    let value = this.get("mediaTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mediaTypes(value: string | null) {
    if (!value) {
      this.unset("mediaTypes");
    } else {
      this.set("mediaTypes", Value.fromString(<string>value));
    }
  }

  get prompt(): string | null {
    let value = this.get("prompt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prompt(value: string | null) {
    if (!value) {
      this.unset("prompt");
    } else {
      this.set("prompt", Value.fromString(<string>value));
    }
  }

  get style(): string | null {
    let value = this.get("style");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set style(value: string | null) {
    if (!value) {
      this.unset("style");
    } else {
      this.set("style", Value.fromString(<string>value));
    }
  }

  get sex(): string | null {
    let value = this.get("sex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sex(value: string | null) {
    if (!value) {
      this.unset("sex");
    } else {
      this.set("sex", Value.fromString(<string>value));
    }
  }
}

export class GrantOrder extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GrantOrder must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantOrder", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): GrantOrder | null {
    return changetype<GrantOrder | null>(
      store.get("GrantOrder", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    return value!.toBigInt();
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get encryptedFulfillment(): string {
    let value = this.get("encryptedFulfillment");
    return value!.toString();
  }

  set encryptedFulfillment(value: string) {
    this.set("encryptedFulfillment", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get grant(): Bytes {
    let value = this.get("grant");
    return value!.toBytes();
  }

  set grant(value: Bytes) {
    this.set("grant", Value.fromBytes(value));
  }

  get funder(): Bytes {
    let value = this.get("funder");
    return value!.toBytes();
  }

  set funder(value: Bytes) {
    this.set("funder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get orderCollections(): Array<Bytes> | null {
    let value = this.get("orderCollections");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set orderCollections(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("orderCollections");
    } else {
      this.set("orderCollections", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class MilestoneClaimed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MilestoneClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MilestoneClaimed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MilestoneClaimed", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): MilestoneClaimed | null {
    return changetype<MilestoneClaimed | null>(
      store.get("MilestoneClaimed", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get claimer(): Bytes {
    let value = this.get("claimer");
    return value!.toBytes();
  }

  set claimer(value: Bytes) {
    this.set("claimer", Value.fromBytes(value));
  }

  get milestone(): i32 {
    let value = this.get("milestone");
    return value!.toI32();
  }

  set milestone(value: i32) {
    this.set("milestone", Value.fromI32(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MilestoneStatusUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MilestoneStatusUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MilestoneStatusUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MilestoneStatusUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): MilestoneStatusUpdated | null {
    return changetype<MilestoneStatusUpdated | null>(
      store.get("MilestoneStatusUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get updater(): Bytes {
    let value = this.get("updater");
    return value!.toBytes();
  }

  set updater(value: Bytes) {
    this.set("updater", Value.fromBytes(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value!.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get milestone(): i32 {
    let value = this.get("milestone");
    return value!.toI32();
  }

  set milestone(value: i32) {
    this.set("milestone", Value.fromI32(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Milestone extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Milestone entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Milestone must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Milestone", id.toString(), this);
    }
  }

  static load(id: string): Milestone | null {
    return changetype<Milestone | null>(store.get("Milestone", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currencyGoal(): Array<string> | null {
    let value = this.get("currencyGoal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set currencyGoal(value: Array<string> | null) {
    if (!value) {
      this.unset("currencyGoal");
    } else {
      this.set("currencyGoal", Value.fromStringArray(<Array<string>>value));
    }
  }

  get granteeClaimed(): Array<boolean> | null {
    let value = this.get("granteeClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set granteeClaimed(value: Array<boolean> | null) {
    if (!value) {
      this.unset("granteeClaimed");
    } else {
      this.set("granteeClaimed", Value.fromBooleanArray(<Array<boolean>>value));
    }
  }

  get submitBy(): BigInt {
    let value = this.get("submitBy");
    return value!.toBigInt();
  }

  set submitBy(value: BigInt) {
    this.set("submitBy", Value.fromBigInt(value));
  }

  get status(): BigInt {
    let value = this.get("status");
    return value!.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get allClaimed(): boolean {
    let value = this.get("allClaimed");
    return value!.toBoolean();
  }

  set allClaimed(value: boolean) {
    this.set("allClaimed", Value.fromBoolean(value));
  }
}

export class LevelInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LevelInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LevelInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LevelInfo", id.toString(), this);
    }
  }

  static load(id: string): LevelInfo | null {
    return changetype<LevelInfo | null>(store.get("LevelInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectionIds(): Array<BigInt> | null {
    let value = this.get("collectionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds");
    } else {
      this.set("collectionIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get amounts(): Array<BigInt> | null {
    let value = this.get("amounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set amounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("amounts");
    } else {
      this.set("amounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get level(): BigInt {
    let value = this.get("level");
    return value!.toBigInt();
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }
}

export class GrantMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GrantMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GrantMetadata", id.toString(), this);
    }
  }

  static load(id: string): GrantMetadata | null {
    return changetype<GrantMetadata | null>(store.get("GrantMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get team(): string | null {
    let value = this.get("team");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set team(value: string | null) {
    if (!value) {
      this.unset("team");
    } else {
      this.set("team", Value.fromString(<string>value));
    }
  }

  get tech(): string | null {
    let value = this.get("tech");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tech(value: string | null) {
    if (!value) {
      this.unset("tech");
    } else {
      this.set("tech", Value.fromString(<string>value));
    }
  }

  get strategy(): string | null {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set strategy(value: string | null) {
    if (!value) {
      this.unset("strategy");
    } else {
      this.set("strategy", Value.fromString(<string>value));
    }
  }

  get cover(): string | null {
    let value = this.get("cover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cover(value: string | null) {
    if (!value) {
      this.unset("cover");
    } else {
      this.set("cover", Value.fromString(<string>value));
    }
  }

  get experience(): string | null {
    let value = this.get("experience");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set experience(value: string | null) {
    if (!value) {
      this.unset("experience");
    } else {
      this.set("experience", Value.fromString(<string>value));
    }
  }

  get milestones(): Array<string> | null {
    let value = this.get("milestones");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set milestones(value: Array<string> | null) {
    if (!value) {
      this.unset("milestones");
    } else {
      this.set("milestones", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CurrencyGoal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencyGoal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencyGoal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyGoal", id.toString(), this);
    }
  }

  static load(id: string): CurrencyGoal | null {
    return changetype<CurrencyGoal | null>(store.get("CurrencyGoal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Funded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Funded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Funded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Funded", id.toString(), this);
    }
  }

  static load(id: string): Funded | null {
    return changetype<Funded | null>(store.get("Funded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get funded(): BigInt {
    let value = this.get("funded");
    return value!.toBigInt();
  }

  set funded(value: BigInt) {
    this.set("funded", Value.fromBigInt(value));
  }
}

export class CollectionGrantId extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionGrantId entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionGrantId must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionGrantId", id.toString(), this);
    }
  }

  static load(id: string): CollectionGrantId | null {
    return changetype<CollectionGrantId | null>(
      store.get("CollectionGrantId", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get grants(): Array<Bytes> {
    let value = this.get("grants");
    return value!.toBytesArray();
  }

  set grants(value: Array<Bytes>) {
    this.set("grants", Value.fromBytesArray(value));
  }
}

export class CollectionCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionCreated | null {
    return changetype<CollectionCreated | null>(
      store.get("CollectionCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollectionDeleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionDeleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionDeleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionDeleted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionDeleted | null {
    return changetype<CollectionDeleted | null>(
      store.get("CollectionDeleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollectionMintedTokensSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionMintedTokensSet entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionMintedTokensSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionMintedTokensSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionMintedTokensSet | null {
    return changetype<CollectionMintedTokensSet | null>(
      store.get("CollectionMintedTokensSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get mintedTokensAmount(): BigInt {
    let value = this.get("mintedTokensAmount");
    return value!.toBigInt();
  }

  set mintedTokensAmount(value: BigInt) {
    this.set("mintedTokensAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollectionTokenIdsSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionTokenIdsSet entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionTokenIdsSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionTokenIdsSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionTokenIdsSet | null {
    return changetype<CollectionTokenIdsSet | null>(
      store.get("CollectionTokenIdsSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value!.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DropCollectionsUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DropCollectionsUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropCollectionsUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropCollectionsUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropCollectionsUpdated | null {
    return changetype<DropCollectionsUpdated | null>(
      store.get("DropCollectionsUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get collectionIds(): Array<BigInt> {
    let value = this.get("collectionIds");
    return value!.toBigIntArray();
  }

  set collectionIds(value: Array<BigInt>) {
    this.set("collectionIds", Value.fromBigIntArray(value));
  }

  get oldCollectionIds(): Array<BigInt> {
    let value = this.get("oldCollectionIds");
    return value!.toBigIntArray();
  }

  set oldCollectionIds(value: Array<BigInt>) {
    this.set("oldCollectionIds", Value.fromBigIntArray(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DropCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DropCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropCreated | null {
    return changetype<DropCreated | null>(
      store.get("DropCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DropDeleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DropDeleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropDeleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropDeleted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropDeleted | null {
    return changetype<DropDeleted | null>(
      store.get("DropDeleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokensMinted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokensMinted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokensMinted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokensMinted | null {
    return changetype<TokensMinted | null>(
      store.get("TokensMinted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Funder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Funder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Funder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Funder", id.toString(), this);
    }
  }

  static load(id: string): Funder | null {
    return changetype<Funder | null>(store.get("Funder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value!.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }
}

export class CurrencyAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencyAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CurrencyAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyAdded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CurrencyAdded | null {
    return changetype<CurrencyAdded | null>(
      store.get("CurrencyAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CurrencyRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencyRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CurrencyRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyRemoved", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CurrencyRemoved | null {
    return changetype<CurrencyRemoved | null>(
      store.get("CurrencyRemoved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DesignerSplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DesignerSplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DesignerSplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DesignerSplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DesignerSplitSet | null {
    return changetype<DesignerSplitSet | null>(
      store.get("DesignerSplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get designer(): Bytes {
    let value = this.get("designer");
    return value!.toBytes();
  }

  set designer(value: Bytes) {
    this.set("designer", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FulfillerBaseSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FulfillerBaseSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FulfillerBaseSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FulfillerBaseSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FulfillerBaseSet | null {
    return changetype<FulfillerBaseSet | null>(
      store.get("FulfillerBaseSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fulfiller(): Bytes {
    let value = this.get("fulfiller");
    return value!.toBytes();
  }

  set fulfiller(value: Bytes) {
    this.set("fulfiller", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FulfillerSplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FulfillerSplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FulfillerSplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FulfillerSplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FulfillerSplitSet | null {
    return changetype<FulfillerSplitSet | null>(
      store.get("FulfillerSplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fulfiller(): Bytes {
    let value = this.get("fulfiller");
    return value!.toBytes();
  }

  set fulfiller(value: Bytes) {
    this.set("fulfiller", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OracleUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OracleUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OracleUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OracleUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OracleUpdated | null {
    return changetype<OracleUpdated | null>(
      store.get("OracleUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value!.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TreasurySplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasurySplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TreasurySplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasurySplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TreasurySplitSet | null {
    return changetype<TreasurySplitSet | null>(
      store.get("TreasurySplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get treasury(): Bytes {
    let value = this.get("treasury");
    return value!.toBytes();
  }

  set treasury(value: Bytes) {
    this.set("treasury", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

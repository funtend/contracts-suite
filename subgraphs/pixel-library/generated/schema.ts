// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class CollectionCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionCreated | null {
    return changetype<CollectionCreated | null>(
      store.get("CollectionCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get prices(): Array<BigInt> | null {
    let value = this.get("prices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set prices(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("prices");
    } else {
      this.set("prices", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get buyerProfileIds(): Array<BigInt> | null {
    let value = this.get("buyerProfileIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set buyerProfileIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("buyerProfileIds");
    } else {
      this.set("buyerProfileIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get orderIds(): Array<BigInt> | null {
    let value = this.get("orderIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set orderIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("orderIds");
    } else {
      this.set("orderIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get acceptedTokens(): Array<Bytes> | null {
    let value = this.get("acceptedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set acceptedTokens(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("acceptedTokens");
    } else {
      this.set("acceptedTokens", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get pixelType(): string | null {
    let value = this.get("pixelType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pixelType(value: string | null) {
    if (!value) {
      this.unset("pixelType");
    } else {
      this.set("pixelType", Value.fromString(<string>value));
    }
  }

  get origin(): string | null {
    let value = this.get("origin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set origin(value: string | null) {
    if (!value) {
      this.unset("origin");
    } else {
      this.set("origin", Value.fromString(<string>value));
    }
  }

  get fulfiller(): Bytes {
    let value = this.get("fulfiller");
    return value!.toBytes();
  }

  set fulfiller(value: Bytes) {
    this.set("fulfiller", Value.fromBytes(value));
  }

  get unlimited(): boolean {
    let value = this.get("unlimited");
    return value!.toBoolean();
  }

  set unlimited(value: boolean) {
    this.set("unlimited", Value.fromBoolean(value));
  }

  get fulfillerPercent(): BigInt | null {
    let value = this.get("fulfillerPercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fulfillerPercent(value: BigInt | null) {
    if (!value) {
      this.unset("fulfillerPercent");
    } else {
      this.set("fulfillerPercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get fulfillerBase(): BigInt | null {
    let value = this.get("fulfillerBase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fulfillerBase(value: BigInt | null) {
    if (!value) {
      this.unset("fulfillerBase");
    } else {
      this.set("fulfillerBase", Value.fromBigInt(<BigInt>value));
    }
  }

  get designerPercent(): BigInt | null {
    let value = this.get("designerPercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set designerPercent(value: BigInt | null) {
    if (!value) {
      this.unset("designerPercent");
    } else {
      this.set("designerPercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get dropMetadata(): string | null {
    let value = this.get("dropMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropMetadata(value: string | null) {
    if (!value) {
      this.unset("dropMetadata");
    } else {
      this.set("dropMetadata", Value.fromString(<string>value));
    }
  }

  get dropCollectionIds(): Array<BigInt> | null {
    let value = this.get("dropCollectionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set dropCollectionIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("dropCollectionIds");
    } else {
      this.set(
        "dropCollectionIds",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get collectionMetadata(): string | null {
    let value = this.get("collectionMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectionMetadata(value: string | null) {
    if (!value) {
      this.unset("collectionMetadata");
    } else {
      this.set("collectionMetadata", Value.fromString(<string>value));
    }
  }

  get dropURI(): string | null {
    let value = this.get("dropURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropURI(value: string | null) {
    if (!value) {
      this.unset("dropURI");
    } else {
      this.set("dropURI", Value.fromString(<string>value));
    }
  }

  get encrypted(): boolean {
    let value = this.get("encrypted");
    return value!.toBoolean();
  }

  set encrypted(value: boolean) {
    this.set("encrypted", Value.fromBoolean(value));
  }

  get soldTokens(): BigInt | null {
    let value = this.get("soldTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldTokens(value: BigInt | null) {
    if (!value) {
      this.unset("soldTokens");
    } else {
      this.set("soldTokens", Value.fromBigInt(<BigInt>value));
    }
  }

  get dropId(): BigInt | null {
    let value = this.get("dropId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dropId(value: BigInt | null) {
    if (!value) {
      this.unset("dropId");
    } else {
      this.set("dropId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CollectionDeleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionDeleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionDeleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionDeleted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionDeleted | null {
    return changetype<CollectionDeleted | null>(
      store.get("CollectionDeleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollectionMintedTokensSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionMintedTokensSet entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionMintedTokensSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionMintedTokensSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionMintedTokensSet | null {
    return changetype<CollectionMintedTokensSet | null>(
      store.get("CollectionMintedTokensSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get mintedTokensAmount(): BigInt {
    let value = this.get("mintedTokensAmount");
    return value!.toBigInt();
  }

  set mintedTokensAmount(value: BigInt) {
    this.set("mintedTokensAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CollectionTokenIdsSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionTokenIdsSet entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CollectionTokenIdsSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionTokenIdsSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CollectionTokenIdsSet | null {
    return changetype<CollectionTokenIdsSet | null>(
      store.get("CollectionTokenIdsSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value!.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DropCollectionsUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DropCollectionsUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropCollectionsUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropCollectionsUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropCollectionsUpdated | null {
    return changetype<DropCollectionsUpdated | null>(
      store.get("DropCollectionsUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get collectionIds(): Array<BigInt> {
    let value = this.get("collectionIds");
    return value!.toBigIntArray();
  }

  set collectionIds(value: Array<BigInt>) {
    this.set("collectionIds", Value.fromBigIntArray(value));
  }

  get oldCollectionIds(): Array<BigInt> {
    let value = this.get("oldCollectionIds");
    return value!.toBigIntArray();
  }

  set oldCollectionIds(value: Array<BigInt>) {
    this.set("oldCollectionIds", Value.fromBigIntArray(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DropCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DropCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropCreated | null {
    return changetype<DropCreated | null>(
      store.get("DropCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get dropDetails(): string | null {
    let value = this.get("dropDetails");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropDetails(value: string | null) {
    if (!value) {
      this.unset("dropDetails");
    } else {
      this.set("dropDetails", Value.fromString(<string>value));
    }
  }

  get collectionIds(): Array<BigInt> | null {
    let value = this.get("collectionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds");
    } else {
      this.set("collectionIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class DropDeleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DropDeleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DropDeleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropDeleted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DropDeleted | null {
    return changetype<DropDeleted | null>(
      store.get("DropDeleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dropId(): BigInt {
    let value = this.get("dropId");
    return value!.toBigInt();
  }

  set dropId(value: BigInt) {
    this.set("dropId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokensMinted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokensMinted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokensMinted", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokensMinted | null {
    return changetype<TokensMinted | null>(
      store.get("TokensMinted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class NFTOnlyOrderCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTOnlyOrderCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NFTOnlyOrderCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTOnlyOrderCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NFTOnlyOrderCreated | null {
    return changetype<NFTOnlyOrderCreated | null>(
      store.get("NFTOnlyOrderCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get totalPrice(): BigInt {
    let value = this.get("totalPrice");
    return value!.toBigInt();
  }

  set totalPrice(value: BigInt) {
    this.set("totalPrice", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set messages(value: Array<string> | null) {
    if (!value) {
      this.unset("messages");
    } else {
      this.set("messages", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subOrderPrice(): Array<string> | null {
    let value = this.get("subOrderPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderPrice(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderPrice");
    } else {
      this.set("subOrderPrice", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subOrderCollectionIds(): Array<string> | null {
    let value = this.get("subOrderCollectionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderCollectionIds(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderCollectionIds");
    } else {
      this.set(
        "subOrderCollectionIds",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get subOrderAmount(): Array<string> | null {
    let value = this.get("subOrderAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderAmount(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderAmount");
    } else {
      this.set("subOrderAmount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get orderMetadata(): string | null {
    let value = this.get("orderMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set orderMetadata(value: string | null) {
    if (!value) {
      this.unset("orderMetadata");
    } else {
      this.set("orderMetadata", Value.fromString(<string>value));
    }
  }
}

export class OrderCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OrderCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OrderCreated | null {
    return changetype<OrderCreated | null>(
      store.get("OrderCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get totalPrice(): BigInt {
    let value = this.get("totalPrice");
    return value!.toBigInt();
  }

  set totalPrice(value: BigInt) {
    this.set("totalPrice", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set messages(value: Array<string> | null) {
    if (!value) {
      this.unset("messages");
    } else {
      this.set("messages", Value.fromStringArray(<Array<string>>value));
    }
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }

  get subOrderPrice(): Array<string> | null {
    let value = this.get("subOrderPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderPrice(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderPrice");
    } else {
      this.set("subOrderPrice", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subOrderStatus(): Array<string> | null {
    let value = this.get("subOrderStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderStatus(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderStatus");
    } else {
      this.set("subOrderStatus", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subOrderCollectionIds(): Array<string> | null {
    let value = this.get("subOrderCollectionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderCollectionIds(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderCollectionIds");
    } else {
      this.set(
        "subOrderCollectionIds",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get subOrderIsFulfilled(): Array<boolean> | null {
    let value = this.get("subOrderIsFulfilled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set subOrderIsFulfilled(value: Array<boolean> | null) {
    if (!value) {
      this.unset("subOrderIsFulfilled");
    } else {
      this.set(
        "subOrderIsFulfilled",
        Value.fromBooleanArray(<Array<boolean>>value)
      );
    }
  }

  get subOrderAmount(): Array<string> | null {
    let value = this.get("subOrderAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subOrderAmount(value: Array<string> | null) {
    if (!value) {
      this.unset("subOrderAmount");
    } else {
      this.set("subOrderAmount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get orderMetadata(): string | null {
    let value = this.get("orderMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set orderMetadata(value: string | null) {
    if (!value) {
      this.unset("orderMetadata");
    } else {
      this.set("orderMetadata", Value.fromString(<string>value));
    }
  }
}

export class SubOrderIsFulfilled extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubOrderIsFulfilled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubOrderIsFulfilled must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubOrderIsFulfilled", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SubOrderIsFulfilled | null {
    return changetype<SubOrderIsFulfilled | null>(
      store.get("SubOrderIsFulfilled", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get subOrderId(): BigInt {
    let value = this.get("subOrderId");
    return value!.toBigInt();
  }

  set subOrderId(value: BigInt) {
    this.set("subOrderId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateNFTOnlyOrderMessage extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdateNFTOnlyOrderMessage entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateNFTOnlyOrderMessage must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateNFTOnlyOrderMessage", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdateNFTOnlyOrderMessage | null {
    return changetype<UpdateNFTOnlyOrderMessage | null>(
      store.get("UpdateNFTOnlyOrderMessage", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get newMessageDetails(): string {
    let value = this.get("newMessageDetails");
    return value!.toString();
  }

  set newMessageDetails(value: string) {
    this.set("newMessageDetails", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateOrderDetails extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateOrderDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateOrderDetails must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateOrderDetails", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdateOrderDetails | null {
    return changetype<UpdateOrderDetails | null>(
      store.get("UpdateOrderDetails", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get newOrderDetails(): string {
    let value = this.get("newOrderDetails");
    return value!.toString();
  }

  set newOrderDetails(value: string) {
    this.set("newOrderDetails", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateOrderMessage extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateOrderMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateOrderMessage must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateOrderMessage", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdateOrderMessage | null {
    return changetype<UpdateOrderMessage | null>(
      store.get("UpdateOrderMessage", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get newMessageDetails(): string {
    let value = this.get("newMessageDetails");
    return value!.toString();
  }

  set newMessageDetails(value: string) {
    this.set("newMessageDetails", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateSubOrderStatus extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateSubOrderStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateSubOrderStatus must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateSubOrderStatus", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UpdateSubOrderStatus | null {
    return changetype<UpdateSubOrderStatus | null>(
      store.get("UpdateSubOrderStatus", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get subOrderId(): BigInt {
    let value = this.get("subOrderId");
    return value!.toBigInt();
  }

  set subOrderId(value: BigInt) {
    this.set("subOrderId", Value.fromBigInt(value));
  }

  get newSubOrderStatus(): i32 {
    let value = this.get("newSubOrderStatus");
    return value!.toI32();
  }

  set newSubOrderStatus(value: i32) {
    this.set("newSubOrderStatus", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CurrencyAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencyAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CurrencyAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyAdded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CurrencyAdded | null {
    return changetype<CurrencyAdded | null>(
      store.get("CurrencyAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get wei(): BigInt | null {
    let value = this.get("wei");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set wei(value: BigInt | null) {
    if (!value) {
      this.unset("wei");
    } else {
      this.set("wei", Value.fromBigInt(<BigInt>value));
    }
  }

  get rate(): BigInt | null {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rate(value: BigInt | null) {
    if (!value) {
      this.unset("rate");
    } else {
      this.set("rate", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CurrencyRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencyRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CurrencyRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyRemoved", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CurrencyRemoved | null {
    return changetype<CurrencyRemoved | null>(
      store.get("CurrencyRemoved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DesignerSplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DesignerSplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DesignerSplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DesignerSplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DesignerSplitSet | null {
    return changetype<DesignerSplitSet | null>(
      store.get("DesignerSplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get designer(): Bytes {
    let value = this.get("designer");
    return value!.toBytes();
  }

  set designer(value: Bytes) {
    this.set("designer", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FulfillerBaseSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FulfillerBaseSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FulfillerBaseSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FulfillerBaseSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FulfillerBaseSet | null {
    return changetype<FulfillerBaseSet | null>(
      store.get("FulfillerBaseSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fulfiller(): Bytes {
    let value = this.get("fulfiller");
    return value!.toBytes();
  }

  set fulfiller(value: Bytes) {
    this.set("fulfiller", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FulfillerSplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FulfillerSplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FulfillerSplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FulfillerSplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FulfillerSplitSet | null {
    return changetype<FulfillerSplitSet | null>(
      store.get("FulfillerSplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fulfiller(): Bytes {
    let value = this.get("fulfiller");
    return value!.toBytes();
  }

  set fulfiller(value: Bytes) {
    this.set("fulfiller", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OracleUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OracleUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OracleUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OracleUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OracleUpdated | null {
    return changetype<OracleUpdated | null>(
      store.get("OracleUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value!.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TreasurySplitSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasurySplitSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TreasurySplitSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasurySplitSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TreasurySplitSet | null {
    return changetype<TreasurySplitSet | null>(
      store.get("TreasurySplitSet", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get treasury(): Bytes {
    let value = this.get("treasury");
    return value!.toBytes();
  }

  set treasury(value: Bytes) {
    this.set("treasury", Value.fromBytes(value));
  }

  get pixelType(): i32 {
    let value = this.get("pixelType");
    return value!.toI32();
  }

  set pixelType(value: i32) {
    this.set("pixelType", Value.fromI32(value));
  }

  get split(): BigInt {
    let value = this.get("split");
    return value!.toBigInt();
  }

  set split(value: BigInt) {
    this.set("split", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CommunityCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CommunityCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CommunityCreated | null {
    return changetype<CommunityCreated | null>(
      store.get("CommunityCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get communityId(): BigInt {
    let value = this.get("communityId");
    return value!.toBigInt();
  }

  set communityId(value: BigInt) {
    this.set("communityId", Value.fromBigInt(value));
  }

  get steward(): Bytes {
    let value = this.get("steward");
    return value!.toBytes();
  }

  set steward(value: Bytes) {
    this.set("steward", Value.fromBytes(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get communityMetadata(): string | null {
    let value = this.get("communityMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set communityMetadata(value: string | null) {
    if (!value) {
      this.unset("communityMetadata");
    } else {
      this.set("communityMetadata", Value.fromString(<string>value));
    }
  }

  get validPixelTypes(): Array<string> | null {
    let value = this.get("validPixelTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validPixelTypes(value: Array<string> | null) {
    if (!value) {
      this.unset("validPixelTypes");
    } else {
      this.set("validPixelTypes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get validOrigins(): Array<string> | null {
    let value = this.get("validOrigins");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validOrigins(value: Array<string> | null) {
    if (!value) {
      this.unset("validOrigins");
    } else {
      this.set("validOrigins", Value.fromStringArray(<Array<string>>value));
    }
  }

  get validCreators(): Array<string> | null {
    let value = this.get("validCreators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validCreators(value: Array<string> | null) {
    if (!value) {
      this.unset("validCreators");
    } else {
      this.set("validCreators", Value.fromStringArray(<Array<string>>value));
    }
  }

  get valid20Tokens(): Array<string> | null {
    let value = this.get("valid20Tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set valid20Tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("valid20Tokens");
    } else {
      this.set("valid20Tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get valid20Thresholds(): Array<BigInt> | null {
    let value = this.get("valid20Thresholds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set valid20Thresholds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("valid20Thresholds");
    } else {
      this.set(
        "valid20Thresholds",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get members(): Array<string> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set members(value: Array<string> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CommunityMemberAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityMemberAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CommunityMemberAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityMemberAdded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CommunityMemberAdded | null {
    return changetype<CommunityMemberAdded | null>(
      store.get("CommunityMemberAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get communityId(): BigInt {
    let value = this.get("communityId");
    return value!.toBigInt();
  }

  set communityId(value: BigInt) {
    this.set("communityId", Value.fromBigInt(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get memberProfileId(): BigInt {
    let value = this.get("memberProfileId");
    return value!.toBigInt();
  }

  set memberProfileId(value: BigInt) {
    this.set("memberProfileId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CommunityMemberRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CommunityMemberRemoved entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CommunityMemberRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityMemberRemoved", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CommunityMemberRemoved | null {
    return changetype<CommunityMemberRemoved | null>(
      store.get("CommunityMemberRemoved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get communityId(): BigInt {
    let value = this.get("communityId");
    return value!.toBigInt();
  }

  set communityId(value: BigInt) {
    this.set("communityId", Value.fromBigInt(value));
  }

  get memberProfileId(): BigInt {
    let value = this.get("memberProfileId");
    return value!.toBigInt();
  }

  set memberProfileId(value: BigInt) {
    this.set("memberProfileId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CommunityUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CommunityUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityUpdated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CommunityUpdated | null {
    return changetype<CommunityUpdated | null>(
      store.get("CommunityUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get communityId(): BigInt {
    let value = this.get("communityId");
    return value!.toBigInt();
  }

  set communityId(value: BigInt) {
    this.set("communityId", Value.fromBigInt(value));
  }

  get steward(): Bytes {
    let value = this.get("steward");
    return value!.toBytes();
  }

  set steward(value: Bytes) {
    this.set("steward", Value.fromBytes(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PixelTypeCollectionRegistry extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PixelTypeCollectionRegistry entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PixelTypeCollectionRegistry must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "PixelTypeCollectionRegistry",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): PixelTypeCollectionRegistry | null {
    return changetype<PixelTypeCollectionRegistry | null>(
      store.get("PixelTypeCollectionRegistry", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get collectionIds0(): Array<BigInt> | null {
    let value = this.get("collectionIds0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds0(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds0");
    } else {
      this.set("collectionIds0", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get collectionIds1(): Array<BigInt> | null {
    let value = this.get("collectionIds1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds1(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds1");
    } else {
      this.set("collectionIds1", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get collectionIds2(): Array<BigInt> | null {
    let value = this.get("collectionIds2");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds2(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds2");
    } else {
      this.set("collectionIds2", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get collectionIds3(): Array<BigInt> | null {
    let value = this.get("collectionIds3");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set collectionIds3(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("collectionIds3");
    } else {
      this.set("collectionIds3", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class CollectionMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionMetadata", id.toString(), this);
    }
  }

  static load(id: string): CollectionMetadata | null {
    return changetype<CollectionMetadata | null>(
      store.get("CollectionMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get images(): Array<string> | null {
    let value = this.get("images");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set images(value: Array<string> | null) {
    if (!value) {
      this.unset("images");
    } else {
      this.set("images", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tags(): string | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tags(value: string | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromString(<string>value));
    }
  }

  get colors(): string | null {
    let value = this.get("colors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set colors(value: string | null) {
    if (!value) {
      this.unset("colors");
    } else {
      this.set("colors", Value.fromString(<string>value));
    }
  }

  get sizes(): string | null {
    let value = this.get("sizes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sizes(value: string | null) {
    if (!value) {
      this.unset("sizes");
    } else {
      this.set("sizes", Value.fromString(<string>value));
    }
  }

  get access(): string | null {
    let value = this.get("access");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set access(value: string | null) {
    if (!value) {
      this.unset("access");
    } else {
      this.set("access", Value.fromString(<string>value));
    }
  }

  get onBlankon(): string | null {
    let value = this.get("onBlankon");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set onBlankon(value: string | null) {
    if (!value) {
      this.unset("onBlankon");
    } else {
      this.set("onBlankon", Value.fromString(<string>value));
    }
  }

  get audio(): string | null {
    let value = this.get("audio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set audio(value: string | null) {
    if (!value) {
      this.unset("audio");
    } else {
      this.set("audio", Value.fromString(<string>value));
    }
  }

  get video(): string | null {
    let value = this.get("video");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set video(value: string | null) {
    if (!value) {
      this.unset("video");
    } else {
      this.set("video", Value.fromString(<string>value));
    }
  }

  get communities(): string | null {
    let value = this.get("communities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set communities(value: string | null) {
    if (!value) {
      this.unset("communities");
    } else {
      this.set("communities", Value.fromString(<string>value));
    }
  }

  get microbrandCover(): string | null {
    let value = this.get("microbrandCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set microbrandCover(value: string | null) {
    if (!value) {
      this.unset("microbrandCover");
    } else {
      this.set("microbrandCover", Value.fromString(<string>value));
    }
  }

  get profileHandle(): string | null {
    let value = this.get("profileHandle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileHandle(value: string | null) {
    if (!value) {
      this.unset("profileHandle");
    } else {
      this.set("profileHandle", Value.fromString(<string>value));
    }
  }

  get microbrand(): string | null {
    let value = this.get("microbrand");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set microbrand(value: string | null) {
    if (!value) {
      this.unset("microbrand");
    } else {
      this.set("microbrand", Value.fromString(<string>value));
    }
  }

  get mediaCover(): string | null {
    let value = this.get("mediaCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mediaCover(value: string | null) {
    if (!value) {
      this.unset("mediaCover");
    } else {
      this.set("mediaCover", Value.fromString(<string>value));
    }
  }

  get visibility(): string | null {
    let value = this.get("visibility");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set visibility(value: string | null) {
    if (!value) {
      this.unset("visibility");
    } else {
      this.set("visibility", Value.fromString(<string>value));
    }
  }

  get style(): string | null {
    let value = this.get("style");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set style(value: string | null) {
    if (!value) {
      this.unset("style");
    } else {
      this.set("style", Value.fromString(<string>value));
    }
  }

  get sex(): string | null {
    let value = this.get("sex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sex(value: string | null) {
    if (!value) {
      this.unset("sex");
    } else {
      this.set("sex", Value.fromString(<string>value));
    }
  }

  get mediaTypes(): string | null {
    let value = this.get("mediaTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mediaTypes(value: string | null) {
    if (!value) {
      this.unset("mediaTypes");
    } else {
      this.set("mediaTypes", Value.fromString(<string>value));
    }
  }

  get prompt(): string | null {
    let value = this.get("prompt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prompt(value: string | null) {
    if (!value) {
      this.unset("prompt");
    } else {
      this.set("prompt", Value.fromString(<string>value));
    }
  }
}

export class DropMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DropMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DropMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DropMetadata", id.toString(), this);
    }
  }

  static load(id: string): DropMetadata | null {
    return changetype<DropMetadata | null>(store.get("DropMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dropCover(): string | null {
    let value = this.get("dropCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropCover(value: string | null) {
    if (!value) {
      this.unset("dropCover");
    } else {
      this.set("dropCover", Value.fromString(<string>value));
    }
  }

  get dropTitle(): string | null {
    let value = this.get("dropTitle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropTitle(value: string | null) {
    if (!value) {
      this.unset("dropTitle");
    } else {
      this.set("dropTitle", Value.fromString(<string>value));
    }
  }
}

export class CommunityMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommunityMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommunityMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityMetadata", id.toString(), this);
    }
  }

  static load(id: string): CommunityMetadata | null {
    return changetype<CommunityMetadata | null>(
      store.get("CommunityMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subTopic(): string | null {
    let value = this.get("subTopic");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subTopic(value: string | null) {
    if (!value) {
      this.unset("subTopic");
    } else {
      this.set("subTopic", Value.fromString(<string>value));
    }
  }

  get cover(): string | null {
    let value = this.get("cover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cover(value: string | null) {
    if (!value) {
      this.unset("cover");
    } else {
      this.set("cover", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }
}

export class OrderMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OrderMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OrderMetadata", id.toString(), this);
    }
  }

  static load(id: string): OrderMetadata | null {
    return changetype<OrderMetadata | null>(store.get("OrderMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get images(): Array<string> | null {
    let value = this.get("images");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set images(value: Array<string> | null) {
    if (!value) {
      this.unset("images");
    } else {
      this.set("images", Value.fromStringArray(<Array<string>>value));
    }
  }

  get names(): Array<string> | null {
    let value = this.get("names");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set names(value: Array<string> | null) {
    if (!value) {
      this.unset("names");
    } else {
      this.set("names", Value.fromStringArray(<Array<string>>value));
    }
  }
}
